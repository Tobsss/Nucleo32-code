/*
 * stm32l476xx.h
 *
 *  Created on: Oct 22, 2024
 *      Author: User
 */

#ifndef INC_STM32L476XX_H_
#define INC_STM32L476XX_H_

#include<stdint.h>

#define _vo volatile

/*
 base addresses of flash and SRAM memories
 */

#define FLASH_BASEADDR					0X08000000U				/* Explain this macro briefly here */
#define SRAM1_BASEADDR					0x20000000U				/* Explain this macro briefly here */
#define SRAM2_BASEADDR					0x20014000U				/* Explain this macro briefly here */
#define ROM_BASEADDR					0x1FFF0000U				/* Explain this macro briefly here */
#define SRAM SRAM1_BASEADDR				SRAM1_BASEADDR


/*
 AHBx and APBx Bus Peripheral base addresses
 */

#define PERIPH_BASE						0X40000000U
#define APB1PERIPH_BASE					PERIPH_BASE
#define APB2PERIPH_BASE					0x40010000U
#define AHB1PERIPH_BASE					0x40020000U
#define AHB2PERIPH_BASE					0x48000000U



/*
 * Base address of peripherals which are hanging on AHB2 bus
 */

#define  GPIOA_BASEADDR					(AHB2PERIPH_BASE + 0x0000)
#define  GPIOB_BASEADDR					(AHB2PERIPH_BASE + 0x0400)
#define  GPIOC_BASEADDR					(AHB2PERIPH_BASE + 0x0800)
#define  GPIOD_BASEADDR					(AHB2PERIPH_BASE + 0x0C00)
#define  GPIOE_BASEADDR					(AHB2PERIPH_BASE + 0x1000)
#define  GPIOF_BASEADDR					(AHB2PERIPH_BASE + 0x1400)
#define  GPIOG_BASEADDR					(AHB2PERIPH_BASE + 0x1800)
#define  GPIOH_BASEADDR					(AHB2PERIPH_BASE + 0x1C00)
#define  GPIOI_BASEADDR					(AHB2PERIPH_BASE + 0x2000)

/*
 * Base address of peripherals which are hanging on AHB1 bus
 */

#define  RCC_BASEADDR					(AHB1PERIPH_BASE + 0x1000)

/*
 * Base address of peripherals which are hanging on APB2 bus
 */
#define EXTI_BASEADDR					(APB2PERIPH_BASE + 0x0400)
#define SPI1_BASEADDR					(APB2PERIPH_BASE + 0x3000)
#define SYSCFG_BASEADDR					(APB2PERIPH_BASE + 0x0000)
#define USART1_BASEADDR					(APB2PERIPH_BASE + 0x3800)

/*
 * Base address of peripherals which are hanging on APB1 bus
 */
#define I2C1_BASEADDR					(APB1PERIPH_BASE + 0x5400)
#define I2C2_BASEADDR					(APB1PERIPH_BASE + 0x5800)
#define I2C3_BASEADDR					(APB1PERIPH_BASE + 0x5C00)

#define SPI2_BASEADDR					(APB1PERIPH_BASE + 0x3800)
#define SPI3_BASEADDR					(APB1PERIPH_BASE + 0x3C00)

#define USART2_BASEADDR					(APB1PERIPH_BASE + 0x4400)
#define USART3_BASEADDR					(APB1PERIPH_BASE + 0x4800)
#define UART4_BASEADDR					(APB1PERIPH_BASE + 0x4C00)
#define UART5_BASEADDR					(APB1PERIPH_BASE + 0x5000)



/**************peripheral register definition structures*************/

/*
 * peripheral register definition structure for RCC
 */
typedef struct
{
 uint32_t CR;					/*							Address offset: 0x00 */
 uint32_t ICSCR;				/*							Address offset: 0x04 */
 uint32_t CFGR;					/*							Address offset: 0x08 */
 uint32_t PLLCFGR;				/*							Address offset: 0x0C */
 uint32_t PLLSAI1CFGR;			/*							Address offset: 0x10 */
 uint32_t PLLSAI2CFGR;			/*							Address offset: 0x14 */
 uint32_t CIER;					/*							Address offset: 0x18 */
 uint32_t CIFR;					/*							Address offset: 0x1C */
 uint32_t CICR;					/*							Address offset: 0x20 */
 uint32_t RESERVED0;			/*							Address offset: 0x24 */
 uint32_t AHB1RSTR;				/*							Address offset: 0x28 */
 uint32_t AHB2RSTR;				/*							Address offset: 0x2C */
 uint32_t AHB3RSTR;				/*							Address offset: 0x30 */
 uint32_t RESERVED1;			/*							Address offset: 0x34 */
 uint32_t APB1RSTR1;			/*							Address offset: 0x38 */
 uint32_t APB1RSTR2;			/*							Address offset: 0x3C */
 uint32_t APB2RSTR;				/*							Address offset: 0x40 */
 uint32_t RESERVED2;			/*							Address offset: 0x44 */
 uint32_t AHB1ENR;				/*							Address offset: 0x48 */
 uint32_t AHB2ENR;				/*							Address offset: 0x4C */
 uint32_t AHB3ENR;				/*							Address offset: 0x50 */
 uint32_t RESERVED3;			/*							Address offset: 0x54 */
 uint32_t APB1ENR1;				/*							Address offset: 0x58 */
 uint32_t APB1ENR2;				/*							Address offset: 0x5C */
 uint32_t APB2ENR;				/*							Address offset: 0x60 */
 uint32_t RESERVED4;			/*							Address offset: 0x64 */
 uint32_t AHB1SMENR;			/*							Address offset: 0x68 */
 uint32_t AHB2SMENR;			/*							Address offset: 0x6C */
 uint32_t AHB3SMENR;			/*							Address offset: 0x70 */
 uint32_t RESERVED5;			/*							Address offset: 0x74 */
 uint32_t APB1SMENR1;			/*							Address offset: 0x78 */
 uint32_t APB1SMENR2;			/*							Address offset: 0x7C */
 uint32_t APB2SMENR;			/*							Address offset: 0x80 */
 uint32_t RESERVED6;			/*							Address offset: 0x84 */
 uint32_t CCIPR;		 		/*							Address offset: 0x88 */
 uint32_t RESERVED7;			/*							Address offset: 0x8C */
 uint32_t BDCR;					/*							Address offset: 0x90 */
 uint32_t CSR;					/*							Address offset: 0x94 */
}RCC_RegDef_t;


/*
 * peripheral register definition structure for GPIO
 */
typedef struct
{
	uint32_t MODER;					/*	GPIO port mode register                   Address offset: 0x00  */
	uint32_t OTYPER;				/*	GPIO port output type register            Address offset: 0x04  */
	uint32_t OSPEEDR;				/*	GPIO port output speed register           Address offset: 0x08  */
	uint32_t PUPDR;					/*	GPIO port pull-up/pull-down register      Address offset: 0x0C  */
	uint32_t IDR;					/*	GPIO port input data register             Address offset: 0x10  */
	uint32_t ODR;					/*	GPIO port output data register            Address offset: 0x14  */
	uint32_t BSRR;					/*	GPIO port bit set/reset register          Address offset: 0x18  */
	uint32_t LCKR;					/*	GPIO port configuration lock register  	  Address offset: 0x1C  */
	uint32_t AFRL;
	uint32_t AFRH;
	uint32_t BRR;
	uint32_t ASCR;		            /*	GPIO alternate function low register   Address offset: 0x20-0X24  */
} GPIO_RegDef_t;

/*
 * peripheral register definition structure for SPI
 */
typedef struct{
	uint32_t CR1;		/*<SPI control register 1  Address offset: 0x00>*/
	uint32_t CR2;		/*<SPI control register 2  Address offset: 0x04>*/
	uint32_t SR;		/*<SPI status register  Address offset: 0x08>*/
	uint32_t DR;		/*<SPI data register  Address offset: 0x0C>*/
	uint32_t CRCPR;		/*<SPI CRC polynomial register  Address offset: 0x10>*/
	uint32_t RXCRCR;	/*<SPI Rx CRC register  Address offset: 0x14>*/
	uint32_t TXCRCR;	/*<SPI Tx CRC register  Address offset: 0x18>*/
}SPI_RegDef_t;

/*
 * peripheral register definition structure for USART
 */
typedef struct{
	uint32_t CR1;		/*<USART control register 1  Address offset: 0x00>*/
	uint32_t CR2;		/*<USART control register 2  Address offset: 0x04>*/
	uint32_t CR3;		/*<USART control register 3  Address offset: 0x08>*/
	uint32_t BRR;		/*<USART Baud rate register  Address offset: 0x0C>*/
	uint32_t GTPR;		/*<USART Guard time and prescaler register  Address offset: 0x10>*/
	uint32_t RTOR;		/*<USART Receiver timeout register  Address offset: 0x14>*/
	uint32_t RQR;	/*<USART Request register  Address offset: 0x18>*/
	uint32_t ISR;	/*<USART Interrupt and status register  Address offset: 0x1C>*/
	uint32_t ICR;	/*<USART Interrupt flag clear register  Address offset: 0x20>*/
	uint32_t RDR;	/*<USART Receive data register  Address offset: 0x24>*/
	uint32_t TDR;	/*<USART Transmit data register Address offset: 0x28>*/
}USART_RegDef_t;

/*
 * peripheral definitions (peripheral base addresses type-casted to xxx_RegDef_t)
 */
#define GPIOA							((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB							((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define GPIOC							((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define GPIOD							((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define GPIOE							((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define GPIOF							((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define GPIOG							((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define GPIOH							((GPIO_RegDef_t*)GPIOH_BASEADDR)
#define GPIOI							((GPIO_RegDef_t*)GPIOI_BASEADDR)

#define RCC								((RCC_RegDef_t*)RCC_BASEADDR)

#define SPI1 							((SPI_RegDef_t*)SPI1_BASEADDR)
#define SPI2 							((SPI_RegDef_t*)SPI2_BASEADDR)
#define SPI3 							((SPI_RegDef_t*)SPI3_BASEADDR)

#define USART1							((USART_RegDef_t*)USART1_BASEADDR)
#define USART2							((USART_RegDef_t*)USART2_BASEADDR)
#define USART3							((USART_RegDef_t*)USART3_BASEADDR)
#define UART4							((USART_RegDef_t*)UART4_BASEADDR)
#define UART5							((USART_RegDef_t*)UART5_BASEADDR)


/*
 * Clock Enable Macros for GPIOx peripherals
 */
#define GPIOA_PCLK					(RCC->AHB2ENR |= (1 << 0))
#define GPIOB_PCLK			    	(RCC->AHB2ENR |= (1 << 1))
#define GPIOC_PCLK					(RCC->AHB2ENR |= (1 << 2))
#define GPIOD_PCLK				    (RCC->AHB2ENR |= (1 << 3))
#define GPIOE_PCLK					(RCC->AHB2ENR |= (1 << 4))
#define GPIOF_PCLK					(RCC->AHB2ENR |= (1 << 5))
#define GPIOG_PCLK		     		(RCC->AHB2ENR |= (1 << 6))
#define GPIOH_PCLK					(RCC->AHB2ENR |= (1 << 7))
#define GPIOI_PCLK				    (RCC->AHB2ENR |= (1 << 8))


/*
 * Clock Enable Macros for I2Cx peripherals
 */
#define I2C1_PCLK					(RCC->APB1ENR1 |= (1 << 21))
#define I2C2_PCLK			    	(RCC->APB1ENR1 |= (1 << 22))
#define I2C3_PCLK					(RCC->APB1ENR1 |= (1 << 23))

/*
 * Clock Enable Macros for SPIx peripherals
 */
#define SPI1_PCLK					(RCC->APB2ENR  |= (1 << 12))
#define SPI2_PCLK					(RCC->APB1ENR1 |= (1 << 14))
#define SPI3_PCLK					(RCC->APB1ENR1 |= (1 << 15))

/*
 * Clock Enable Macros for USARTx peripherals
 */
#define USART1_PCLK					(RCC->APB2ENR  |= (1 << 14))
#define USART2_PCLK					(RCC->APB1ENR1 |= (1 << 17))
#define USART3_PCLK					(RCC->APB1ENR1 |= (1 << 18))
#define UART4_PCLK		 			(RCC->APB1ENR1 |= (1 << 19))
#define UART5_PCLK		 			(RCC->APB1ENR1 |= (1 << 20))

/*
 * Clock Enable Macros for SYSCFG peripherals
 */
#define SYSCFG_PCLK			 			(RCC->APB2ENR |= (1 << 0)


/*
 * Clock Disable Macros for GPIOx peripherals
 */
#define GPIOA_PCLK_DI					(RCC->AHB2ENR &= ~(1 << 0))
#define GPIOB_PCLK_DI					(RCC->AHB2ENR &= ~(1 << 1))
#define GPIOC_PCLK_DI					(RCC->AHB2ENR &= ~(1 << 2))
#define GPIOD_PCLK_DI					(RCC->AHB2ENR &= ~(1 << 3))
#define GPIOE_PCLK_DI					(RCC->AHB2ENR &= ~(1 << 4))
#define GPIOF_PCLK_DI					(RCC->AHB2ENR &= ~(1 << 5))
#define GPIOG_PCLK_DI					(RCC->AHB2ENR &= ~(1 << 6))
#define GPIOH_PCLK_DI					(RCC->AHB2ENR &= ~(1 << 7))
#define GPIOI_PCLK_DI					(RCC->AHB2ENR &= ~(1 << 8))

/*
 * Clock Disable Macros for I2Cx peripherals
 */
#define I2C1_PCLK_DI					(RCC->APB1ENR1 &= ~(1 << 21))
#define I2C2_PCLK_DI					(RCC->APB1ENR1 &= ~(1 << 22))
#define I2C3_PCLK_DI					(RCC->APB1ENR1 &= ~(1 << 23))



/*
 * Clock Disable Macros for SPIx peripherals
 */
#define SPI1_PCLK_DI					(RCC->APB2ENR  &= ~(1 << 12))
#define SPI2_PCLK_DI					(RCC->APB1ENR1 &= ~(1 << 14))
#define SPI3_PCLK_DI					(RCC->APB1ENR1 &= ~(1 << 15))

/*
 * Clock Disable Macros for USARTx peripherals
 */
#define USART1_PCLK_DI			 			(RCC->APB2ENR  &= ~(1 << 14))
#define USART2_PCLK_DI			 			(RCC->APB1ENR1 &= ~(1 << 17))
#define USART3_PCLK_DI						(RCC->APB1ENR1 &= ~(1 << 18))
#define UART4_PCLK_DI			 			(RCC->APB1ENR1 &= ~(1 << 19))
#define UART5_PCLK_DI			 			(RCC->APB1ENR1 &= ~(1 << 20))


/*
 * Clock Disable Macros for SYSCFG peripherals
 */
#define SYSCFG_PCLK_DI()			 			(RCC->APB2ENR &= ~(1 << 0)

/*
 * Macros to reset GPIOx peripherals
 * //do...while..condition zero loop is a technique used in C programming
 * to execute multiple C statements using single C macro
 */
#define GPIOA_REG_RESET()					do{(RCC->AHB2RSTR |= (1 << 0)); (RCC->AHB2RSTR &= (1 << 0));}while(0)
#define GPIOB_REG_RESET()					do{(RCC->AHB2RSTR |= (1 << 1)); (RCC->AHB2RSTR &= (1 << 1));}while(0)
#define GPIOC_REG_RESET()					do{(RCC->AHB2RSTR |= (1 << 2)); (RCC->AHB2RSTR &= (1 << 2));}while(0)
#define GPIOD_REG_RESET()					do{(RCC->AHB2RSTR |= (1 << 3)); (RCC->AHB2RSTR &= (1 << 3));}while(0)
#define GPIOE_REG_RESET()					do{(RCC->AHB2RSTR |= (1 << 4)); (RCC->AHB2RSTR &= (1 << 4));}while(0)
#define GPIOF_REG_RESET()					do{(RCC->AHB2RSTR |= (1 << 5)); (RCC->AHB2RSTR &= (1 << 5));}while(0)
#define GPIOG_REG_RESET()					do{(RCC->AHB2RSTR |= (1 << 6)); (RCC->AHB2RSTR &= (1 << 6));}while(0)
#define GPIOH_REG_RESET()					do{(RCC->AHB2RSTR |= (1 << 7)); (RCC->AHB2RSTR &= (1 << 7));}while(0)
#define GPIOI_REG_RESET()					do{(RCC->AHB2RSTR |= (1 << 8)); (RCC->AHB2RSTR &= (1 << 8));}while(0)

//some generic macros

#define ENABLE					1
#define DISABLE					0
#define SET 					ENABLE
#define RESET 					DISABLE
#define GPIO_PIN_SET			SET
#define GPIO_PIN_RESET			RESET
#define FLAG_RESET				RESET
#define FLAG_SET				SET

/*******************************************************
 * Bit position definitions of SPI peripheral
 *
 ******************************************************/
/*
 *  Bit position definitions SPI_CR1
 */
#define SPI_CR1_CPHA		0
#define SPI_CR1_CPOL		1
#define SPI_CR1_MSTR		2
#define SPI_CR1_BR  		3
#define SPI_CR1_SPE  		6
#define SPI_CR1_LSB  		7
#define SPI_CR1_SSI 		8
#define SPI_CR1_SSM  		9
#define SPI_CR1_RX  		0xA
#define SPI_CR1_DFF 		0xB
#define SPI_CR1_CRCNEXT		0xC
#define SPI_CR1_CRCEN 		0xD
#define SPI_CR1_BIDIOE 		0xE
#define SPI_CR1_BIDIMODE 	0xF

/*
 *  Bit position definitions SPI_CR2
 */
#define SPI_CR2_RXDMAEN		0
#define SPI_CR2_TXDMAEN		1
#define SPI_CR2_SSOE		2
#define SPI_CR2_NSSP  		3
#define SPI_CR2_FRF  		4
#define SPI_CR2_ERRIE  		5
#define SPI_CR2_RXNEIE 		6
#define SPI_CR2_TXEIE 		7
#define SPI_CR2_DS  		8
#define SPI_CR2_FRXTH		12
#define SPI_CR2_LDMA_RX 	13
#define SPI_CR2_LDMA_TX 	14

/*
 *  Bit position definitions SPI_SR
 */
#define SPI_SR_RXNE			0
#define SPI_SR_TXE			1
#define SPI_SR_CRCERR		4
#define SPI_SR_MODF  		5
#define SPI_SR_OVR 		    6
#define SPI_SR_BSY 		    7
#define SPI_SR_FRE  		8
#define SPI_SR_FRLVL		9
#define SPI_SR_FTLVL 		11


/*
 *  Bit position definitions USART_CR1
 */
#define USART_CR1_UE			0
#define USART_CR1_UESM			1
#define USART_CR1_RE			2
#define USART_CR1_TE			3
#define USART_CR1_IDLEIE		4
#define USART_CR1_RXNEIE		5
#define USART_CR1_TCIE  		6
#define USART_CR1TXEIE  		7
#define USART_CR1_PEIE		    8
#define USART_CR1_PS    		9
#define USART_CR1_PCE    		10
#define USART_CR1_WAKE    		11
#define USART_CR1_M   	    	12
#define USART_CR1_MME    		13
#define USART_CR1_CMIE			14
#define USART_CR1_OVER8			15
#define USART_CR1_DEDT			16
#define USART_CR1_DEAT			21
#define USART_CR1_RTOIE			26
#define USART_CR1_EOBIE			27
#define USART_CR1_M0   	    	28



#include "stm32l476xx_gpio_driver.h"
#include "stm32l476xx_spi_driver.h"
#include "stm32l476xx_usart_driver.h"


#endif /* INC_STM32L476XX_H_ */


